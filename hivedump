#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;

$| = 1;

my $hive = "/usr/bin/hive";

my $db = '';
my $all_db = 0;
my $if_not_exists = 0;
my $drop_table = 0;
my $no_location = 0;
my $no_partition = 0;
my $no_tblproperties = 0;
my $no_stored_as = 0;
my $no_row_format = 0;
my $help = 0;

main();

sub usage {
	my $msg = shift() || "";
	print STDERR "\nERROR: $msg\n" if defined $msg and length $msg;
	print STDERR qq|
Usage: $0 [options] > dump.hql

  --database=<db_name>  Specify the DB to export
  --all-databases       Export all databases
  --if-not-exists       Add "IF NOT EXISTS" after "CREATE TABLE"
  --drop-table          Add "DROP TABLE ...;" before "CREATE TABLE"
  --no-location         Suppress LOCATION clause
  --no-partition        Suppress PARTITION information
  --no-tblproperties    Suppress TBLPROPERTIES clause
  --no-stored-as        Suppress STORED AS clause
  --no-row-format       Suppress ROW FORMAT clause
  --help                Prints this information

|;
	exit (1);
}

sub main {
	GetOptions(
		"database=s"		=> \$db,
		"all-databases"		=> \$all_db,
		"if-not-exists"		=> \$if_not_exists,
		"drop-table"		=> \$drop_table,
		"no-location"		=> \$no_location,
		"no-partition"		=> \$no_partition,
		"no-tblproperties"	=> \$no_tblproperties,
		"no-stored-as"		=> \$no_stored_as,
		"no-row-format"		=> \$no_row_format,
		"help"              => \$help,
	) or usage("Error parsing options!");

	if ($help) { usage(); }

	if (length($db)) {
		dump_db($db);
	} elsif ($all_db) {
                dump_databases();
	} else {
		usage("Provide exactly one of --all-databases or --database=<db_name>");
	}
}

sub dump_databases {
	my @db_list = qx|$hive cli -e "show databases" 2>/dev/null|;
	map chomp, @db_list;

	for my $db_name (@db_list) {
		dump_db($db_name);
		print STDERR "DB $db dumped\n";
	}
}

#
# List all the tables in a DB
#
sub list_tables {
	my ($db) = @_;
	my @tables = qx|$hive cli -e "use $db; show tables;" 2>/dev/null|;
	map chomp, @tables;
	return @tables;
}

#
# Get a DB DDL
#
sub get_ddl {
	my ($db) = @_;

	#
	# Creating temporary file name
	#
	my $tmp = sprintf("/tmp/.hivedump.$db.%d.%d.%d", $$, time(), rand(10000));

	unless (open(OUT, ">$tmp")) {
		print STDERR "Error opening intermediate file $tmp\nAborting now.\n";
		exit (-1);
	}

	print OUT "use $db;\n";

	#
	# Listing tables
	#
	my @tables = list_tables($db);
	print STDERR "  . table list acquired\n";

	for my $table (@tables) {
		print OUT qq|show create table $table;\n|;
		print OUT qq|set system:user.name;\n|;
	}

	close OUT;

	#
	# Getting each table DDL
	#
	my $ddl = qx|$hive cli -f $tmp 2>/dev/null|;
	unlink ($tmp);

	$ddl =~ s/system:user.name[^\n]+/;\n\n/g;

	#
	# Add DROP TABLE/VIEW before CREATE TABLE/VIEW, if $drop_table is true
	#
	$ddl =~ s/CREATE(\s+EXTERNAL)?\s+(TABLE|VIEW)\s+([^\n(\s]+)/DROP $2 IF EXISTS $3;\n\nCREATE $1 $2 $3/g if $drop_table;

	#
	# Add IF NOT EXISTS after CREATE TABLE/VIEW if $if_not_exists is true
	#
	$ddl =~ s/CREATE(\s+EXTERNAL)?\s+(TABLE|VIEW)/CREATE $2 IF NOT EXISTS/g if $if_not_exists;

	#
	# Suppress undesired clauses
	#
	$ddl = suppress("^LOCATION",		$ddl) if $no_location;
	$ddl = suppress("^TBLPROPERTIES",	$ddl) if $no_tblproperties;
	$ddl = suppress("^STORED AS",		$ddl) if $no_stored_as;
	$ddl = suppress("^INPUTFORMAT",		$ddl) if $no_stored_as;
	$ddl = suppress("^OUTPUTFORMAT",	$ddl) if $no_stored_as;
	$ddl = suppress("^ROW FORMAT",		$ddl) if $no_row_format;

	#
	# Escape column names to avoid clashes with reserved words
	#
        #$ddl = escape_columns($ddl);

	return ($ddl);
}

#
# Create a parsable version of the DDL
#
sub get_parsable_ddl {
	my ($ddl) = @_;

	my @ddl = split("\n", $ddl);
	my $parsable = join("", @ddl);
	my @parsable = split(";", $parsable);

	return @parsable;
}

#
# Dump a whole DB
#
sub dump_db {
	my ($db) = @_;
	unless (defined $db and $db) {
		print STDERR "No DB provided to dump_db()\n";
		exit (-1);
	}

	print STDERR "Dumping DB $db\n";

	#
	# Get the DB DDL
	#
	my $ddl = get_ddl($db);
	$ddl .= "\n\n";

	print STDERR "  . table DDL acquired\n";

	#
	# Scan for partitions on tables
	#
        unless ($no_partition) {
            map {
                    if (/CREATE(\s+EXTERNAL)?\s+TABLE\s+([^\(\s]+).*PARTITIONED\s+BY/) {
                            my $table = $2;
                            # the table name is like `foo`, dequote it to avoid error.
                            $table =~ s/`(.*)`/$1/;
                            print STDERR "  . scanning partitions on table $table\n";

                            my @partitions = split "\n", qx|$hive cli -e "use $db; show partitions $table;" 2>/dev/null|;

                            for my $p (@partitions) {
                                    $p =~ s/([^=]+)=(.*)/$1='$2'/;
                                    $ddl .= "ALTER TABLE $table ADD PARTITION ($p);\n";
                            }
                    }
            } get_parsable_ddl($ddl);
        }

	#
	# Prints the DDL with a 'use <DB_name>;' statement on top
	#
	print "CREATE DATABASE IF NOT EXISTS $db;\n\nUSE $db;\n\n$ddl\n";
	print STDERR "  . dump done\n";
}

#
# Suppress a clause from a table declaration
# The clause is identified by matching a pattern on its
# first line. Every following line starting with a space
# or a tab is suppressed too.
#
sub suppress {
	my ($pattern, $ddl) = @_;

	my @ddl = split "\n", $ddl;
	my @out = ();
	while (1) {
		my $line = shift(@ddl);
		last unless defined $line;

		if ($line =~ m/$pattern/) {
			while ($ddl[0] =~ /^\s/) { shift @ddl; }
		} else {
			push @out, $line;
		}
	}

	return join("\n", @out);
}

#
# Escapes column names by adding backticks
#
sub escape_columns {
	my ($ddl) = @_;

	my @ddl = split "\n", $ddl;
	my @out = ();
	while (1) {
		my $line = shift(@ddl);
		last unless defined $line;
		push @out, $line;

		if ($line =~ m/(CREATE(\s+EXTERNAL)?\s+TABLE|PARTITIONED\s+BY)/ and defined $ddl[0]) {
			while ($ddl[0] =~ /^\s/) {
				my $subline = shift @ddl;
				$subline =~ s/^(\s+)([^\s]+)/$1`$2`/;
				push @out, $subline;
				last unless defined $ddl[0];
			}
		}
	}

	return join("\n", @out);
}

