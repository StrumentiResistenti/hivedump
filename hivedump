#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;

my $hive = "/usr/bin/hive";

my $db = '';
my $all_db = 0;
my $if_not_exists = 0;
my $drop_table = 0;
my $no_location = 0;
my $no_tblproperties = 0;
my $no_stored_as = 0;
my $no_row_format = 0;

GetOptions(
	"database=s"		=> \$db,
	"all-databases"		=> \$all_db,
	"if-not-exists"		=> \$if_not_exists,
	"drop-table"		=> \$drop_table,
	"no-location"		=> \$no_location,
	"no-tblproperties"	=> \$no_tblproperties,
	"no-stored-as"		=> \$no_stored_as,
	"no-row-format"		=> \$no_row_format,
) or usage("Error parsing options!");

sub usage {
	my $msg = shift() || "";
	print STDERR "\nERROR: $msg\n" if defined $msg and length $msg;
	print STDERR qq|
Usage: $0 [options]

  --database=<db_name>  Specify the DB to export
  --all-databases       Export all databases
  --if-not-exists       Add "IF NOT EXISTS" after "CREATE TABLE"
  --drop-table          Add "DROP TABLE ...;" before "CREATE TABLE"
  --no-location			Suppress LOCATION
  --no-tblproperties    Suppress TBLPROPERTIES
  --no-stored-as        Suppress STORED AS
  --no-row-format       Suppress ROW FORMAT
|;
	exit (1);
}

if (length($db)) {
	dump_db($db);
} elsif ($all_db) {
	for my $db_name (get_databases()) {
		dump_db($db_name);
	}
} else {
	usage("Specify at least one of --all-databases or --database=<db_name>");
}

sub get_databases {
	my @db_list = qx|$hive cli -e "show databases" 2>/dev/null|;
	map chomp, @db_list;

	for my $db_name (@db_list) {
		dump_db($db_name);
	}
}

sub dump_db {
	my ($db) = @_;
	my $tmp = sprintf("/tmp/.hivedump.$db.%d.%d.%d", $$, time(), rand(10000));

	if (open(OUT, ">$tmp")) {
		print OUT "use $db;\n";

		my @tables = qx|$hive cli -e "use $db; show tables;" 2>/dev/null|;
		map chomp, @tables;

		for my $table (@tables) {
			print OUT qq|show create table $table;\n|;
			print OUT qq|set system:user.name;\n|;
		}

		close OUT;

		my $ddl = qx|$hive cli -f $tmp 2>/dev/null|;
		$ddl =~ s/system:user.name[^\n]+/;\n\n/g;

		#
		# Add DROP TABLE/VIEW before CREATE TABLE/VIEW, if $drop_table is true
		#
		$ddl =~ s/CREATE\s+(TABLE|VIEW)\s+([^\n(]+)/DROP $1 $2;\n\nCREATE $1 $2/g if $drop_table;

		#
		# Add IF NOT EXISTS after CREATE TABLE/VIEW if $if_not_exists is true
		#
		$ddl =~ s/CREATE\s+(TABLE|VIEW)/CREATE $1 IF NOT EXISTS/g if $if_not_exists;

		$ddl = suppress("^LOCATION",		$ddl) if $no_location;
		$ddl = suppress("^TBLPROPERTIES",	$ddl) if $no_tblproperties;
		$ddl = suppress("^STORED AS",		$ddl) if $no_stored_as;
		$ddl = suppress("^INPUTFORMAT",		$ddl) if $no_stored_as;
		$ddl = suppress("^OUTPUTFORMAT",	$ddl) if $no_stored_as;
		$ddl = suppress("^ROW FORMAT",		$ddl) if $no_row_format;

		print $ddl;
	}
}

sub suppress {
	my ($pattern, $ddl) = @_;

	my @ddl = split "\n", $ddl;
	my @out = ();
	while (1) {
		my $line = shift(@ddl);
		# print " ** $line\n";
		last unless defined $line;
		if ($line =~ m/$pattern/) {
			while ($ddl[0] =~ /^\s/) { shift @ddl; }
		} else {
			push @out, $line;	
		}
	}

	return join("\n", @out);
}
